name: Build, Test and Deploy to Prod

on:
  push:
    branches:
      - main

env:
  SQLX_OFFLINE: true

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo
          server/target/
        key: ${{ runner.os }}-cargo-${{ hashFiles('server/Cargo.lock') }}
        restore-keys: ${{ runner.os }}-cargo-

    - name: Install Rust
      uses: actions-rs/toolchain@v1
      with:
        profile: minimal
        toolchain: stable

    - name: Build and test code
      working-directory: ./server
      run: |
        cargo build --verbose
        cargo test --verbose

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Log in to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build and push Docker images
      uses: docker/bake-action@v2.3.0
      with:
        files: ./server/docker-bake.hcl
        push: true
        set: |
          *.cache-from=type=gha
          *.cache-to=type=gha,mode=max

  deploy:
    needs: build
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Log in to Docker Hub
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Install sshpass
      run: sudo apt-get install sshpass

    - name: Copy docker-compose.yml to droplet
      run: sshpass -v -p ${{ secrets.DROPLET_PASSWORD }} scp -o StrictHostKeyChecking=no server/docker-compose.yml root@${{ vars.DROPLET_IP }}:~
      
    - name: Deploy with environment variables
      uses: appleboy/ssh-action@master
      with:
        host: ${{ vars.DROPLET_IP }}
        username: root
        password: ${{ secrets.DROPLET_PASSWORD }}
        script: |
          cd ~
          cat > .env <<EOL
          RPC_URL=${{ secrets.RPC_URL }}
          PRIVATE_KEY=${{ secrets.PRIVATE_KEY }}
          PUBLIC_KEY=${{ secrets.PUBLIC_KEY }}
          CONTRACT_ADDRESS=${{ secrets.CONTRACT_ADDRESS }}
          EOL

          docker-compose --env-file .env down
          docker-compose --env-file .env pull
          docker-compose --env-file .env up -d

    - name: Deploy
      uses: appleboy/ssh-action@master
      with:
        host: ${{ vars.DROPLET_IP }}
        username: root
        password: ${{ secrets.DROPLET_PASSWORD }}
        script: |
          cd ~
          docker-compose down
          docker-compose pull
          docker-compose up -d
