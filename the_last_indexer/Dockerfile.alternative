# Alternative Dockerfile using npm for better memory management
FROM node:18-alpine AS base

# Set working directory
WORKDIR /app

# Copy package files
COPY package.json package-lock.json ./

# Install dependencies with memory optimization
RUN npm ci --only=production --no-audit --no-fund --prefer-offline

# Copy source code
COPY . .

# Build the indexer
RUN npm run build

# Production stage
FROM node:18-alpine AS production

# Set working directory
WORKDIR /app

# Copy package files
COPY package.json package-lock.json ./

# Install only production dependencies
RUN npm ci --only=production --no-audit --no-fund --prefer-offline

# Copy built files from build stage
COPY --from=base /app/dist ./dist
COPY --from=base /app/apibara.config.ts ./

# Create non-root user for security
RUN addgroup -g 1001 -S nodejs
RUN adduser -S apibara -u 1001

# Change ownership of the app directory
RUN chown -R apibara:nodejs /app
USER apibara

# Expose port (if needed for health checks)
EXPOSE 8080

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
  CMD node -e "console.log('Health check passed')" || exit 1

# Start the indexer
CMD ["npm", "run", "start", "--", "--indexer", "paymesh-starknet"]
